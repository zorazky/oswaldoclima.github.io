{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Error.js","componentes/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","titulo","Formulario","ciudadRef","React","createRef","paisRef","buscarClima","e","preventDefault","respuesta","ciudad","_this","current","value","pais","datosConsulta","onSubmit","this","ref","id","type","htmlFor","defaultValue","Component","Error","mensaje","Clima","mostrarResultado","_this$props$resultado","resultado","name","weather","main","urlIcono","concat","icon","alt","temp","toFixed","src","temp_max","temp_min","App","state","error","consulta","consultaApi","_this$state$consulta","url","fetch","then","json","datos","setState","catch","console","log","prevProps","prevState","cod","componentes_Error","componentes_Clima","componentes_Header","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d52b1239.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = (props) => {\n    return (\n        <div>\n            <nav>\n            <div className=\"nav-wrapper light-blue darken-2\">\n                <a href=\"#\" className=\"brand-logo\"> {props.titulo} </a>\n            </div>\n            </nav>\n        </div>\n    )\n}\n\nHeader.propTypes = {\n    titulo: PropTypes.string.isRequired\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Formulario extends Component {\n    ciudadRef = React.createRef();\n    paisRef = React.createRef();\n    buscarClima = (e) => {\n        e.preventDefault();\n        const respuesta = {\n            ciudad: this.ciudadRef.current.value,\n            pais: this.paisRef.current.value\n        }\n        //console.log(respuesta);\n        this.props.datosConsulta(respuesta);\n    }\n    render() {\n        return (\n            <div className=\"contenedor-form\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <form onSubmit={this.buscarClima}>\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\n                                <input ref={this.ciudadRef} id=\"ciudad\" type=\"text\"/>\n                                <label htmlFor=\"ciudad\">Ciudad:</label>\n                            </div>\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\n                                <select ref={this.paisRef}>\n                                    <option value=\"\" defaultValue>Elige un paíis</option>\n                                    <option value=\"AR\">Argentina</option>\n                                    <option value=\"CO\">Colombia</option>\n                                    <option value=\"CR\">Costa Rica</option>\n                                    <option value=\"ES\">España</option>\n                                    <option value=\"US\">Estados Unidos</option>\n                                    <option value=\"MX\">México</option>\n                                    <option value=\"PE\">Perú</option>\n                                </select>\n                                <label htmlFor=\"pais\">Paíis:</label>\n                            </div>\n                            <div className=\"input-field col s12 m8 l4 offset-2 buscador\">\n                                <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow accent-4\" value=\"Buscar...\" />\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nFormulario.propTypes = {\n    datosConsulta: PropTypes.func.isRequired\n\n}\n\nexport default Formulario;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Error = (props) => {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col s12 m6 offset-m3\">\n                    <div className=\"card-panel red darken-4 error\">\n                        {props.mensaje}\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nError.propTypes = {\n    mensaje: PropTypes.string.isRequired\n}\nexport default Error;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Clima extends Component {\n\n    mostrarResultado = () => {\n\n        const { name, weather, main } = this.props.resultado;\n\n        if (!name || !weather || !main) return null;\n\n        const kelvin = 273.15;\n        const urlIcono = `http://openweathermap.org/img/w/${weather[0].icon}.png`\n        const alt = `clima de ${name}`;\n\n        return (\n            <div className='row'>\n                <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\n                    <div className=\"card-panel light-blue align-center\">\n                        <span className=\"white-text\">\n                            <h2>Resultado Clima de: {name}</h2>\n                            <p className=\"temperatura\">\n                                Actual: {(main.temp - kelvin).toFixed(2)} &deg;C\n                                <img src={urlIcono} alt={alt}/>\n                            </p>\n                            <p>Max. {main.temp_max - kelvin} &deg;C</p>\n                            <p>Min. {main.temp_min - kelvin} &deg;C</p>\n\n                        </span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    render() {\n        return (\n            <div className=\"container\">\n                {this.mostrarResultado()}\n            </div>\n        )\n    }\n}\n\nClima.propTypes = {\n    resultado: PropTypes.object.isRequired\n}\n\nexport default Clima;","import React, { Component } from 'react';\nimport Header from './componentes/Header';\nimport Formulario from './componentes/Formulario';\nimport Error from './componentes/Error';\nimport Clima from './componentes/Clima';\n\n\nclass App extends Component {\n\n  state = {\n    error: '',\n    consulta: {},\n    resultado: {}\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.consulta !== this.state.consulta) {\n      this.consultaApi();\n    }\n  \n    \n  }\n\n  componentDidMount() {\n    this.setState({\n      error: false\n    })\n  }\n\n  consultaApi = () => {\n    const {ciudad, pais} = this.state.consulta;\n    if (!ciudad || !pais) return null;\n\n    const appId = 'e6b26d7cdef854026583ac438a2cf832';\n    let url = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n \n\n    //query con fetch api\n    fetch(url)\n      .then(respuesta => {\n        return respuesta.json();\n      })\n      .then(datos => {\n        this.setState({\n          resultado: datos\n        })\n      })\n      .catch(error => {\n        console.log(error)\n      })\n\n    //leer la url y agregar el API key\n\n    //consultar con fetch\n  }\n\n  datosConsulta = respuesta => {\n    if(respuesta.ciudad === '' || respuesta.pais === '') {\n      this.setState({\n        error: true\n      })\n    } else {\n      this.setState({\n        consulta: respuesta,\n        error: false\n      })\n    }\n  }\n\n  render() {\n\n    const error = this.state.error,\n    {cod} = this.state.resultado;\n    \n    let resultado;\n\n    if(error) { \n\n      resultado = <Error mensaje=\"Ambos campos son obligatorios\"/>\n\n    } else if(cod === \"404\") {\n      resultado = <Error mensaje=\"Ciudad no encontrada\"/>\n    } else {\n      resultado = <Clima resultado={this.state.resultado}/>\n    }\n\n    return (\n      <div className=\"app\">\n        <Header \n          titulo=\"Clima React\"\n        />\n        <Formulario \n          datosConsulta = {this.datosConsulta}\n        />\n        {resultado}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}